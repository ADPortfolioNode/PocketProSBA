#!/usr/bin/env python3
"""
Final Render.com deployment checklist and verification.
Ensures all files are properly configured for successful deployment.
"""

import os
import json
import subprocess
import sys

def check_render_deployment_readiness():
    """Comprehensive check for Render.com deployment readiness."""
    print("=" * 70)
    print("🚀 RENDER.COM DEPLOYMENT READINESS CHECKLIST")
    print("=" * 70)
    
    all_checks_passed = True
    
    # 1. Check requirements.txt
    print("\n1. 📋 CHECKING REQUIREMENTS.TXT...")
    if not os.path.exists('requirements.txt'):
        print("❌ requirements.txt not found!")
        all_checks_passed = False
    else:
        with open('requirements.txt', 'r') as f:
            req_content = f.read()
        
        # Check for Rust dependencies
        rust_deps = ['numpy', 'pydantic', 'chromadb', 'sentence-transformers', 'transformers']
        found_rust = False
        for dep in rust_deps:
            if dep.lower() in req_content.lower():
                print(f"❌ Found Rust dependency: {dep}")
                found_rust = True
                all_checks_passed = False
        
        if not found_rust:
            print("✅ No Rust dependencies found")
    
    # 2. Check gunicorn.conf.py
    print("\n2. 🔧 CHECKING GUNICORN CONFIG...")
    if not os.path.exists('gunicorn.conf.py'):
        print("❌ gunicorn.conf.py not found!")
        all_checks_passed = False
    else:
        with open('gunicorn.conf.py', 'r') as f:
            gunicorn_content = f.read()
        
        if 'worker_class = "sync"' in gunicorn_content:
            print("✅ Using sync workers (no gevent)")
        else:
            print("❌ Not using sync workers")
            all_checks_passed = False
            
        if '0.0.0.0' in gunicorn_content and 'PORT' in gunicorn_content:
            print("✅ Correctly binds to 0.0.0.0:$PORT")
        else:
            print("❌ Not correctly binding to 0.0.0.0:$PORT")
            all_checks_passed = False
    
    # 3. Check wsgi.py
    print("\n3. 📝 CHECKING WSGI ENTRY POINT...")
    if not os.path.exists('wsgi.py'):
        print("❌ wsgi.py not found!")
        all_checks_passed = False
    else:
        print("✅ wsgi.py found")
    
    # 4. Check render.yaml
    print("\n4. ☁️ CHECKING RENDER.YAML...")
    if not os.path.exists('render.yaml'):
        print("❌ render.yaml not found!")
        all_checks_passed = False
    else:
        with open('render.yaml', 'r') as f:
            render_content = f.read()
        
        if 'requirements.txt' in render_content:
            print("✅ Using requirements.txt (not render-minimal)")
        else:
            print("❌ Not using requirements.txt")
            all_checks_passed = False
            
        if 'gunicorn --config gunicorn.conf.py wsgi:application' in render_content:
            print("✅ Correct start command")
        else:
            print("❌ Incorrect start command")
            all_checks_passed = False
    
    # 5. Check minimal_app.py (emergency fallback)
    print("\n5. 🆘 CHECKING EMERGENCY FALLBACK...")
    if not os.path.exists('minimal_app.py'):
        print("❌ minimal_app.py not found!")
        all_checks_passed = False
    else:
        print("✅ minimal_app.py found (emergency fallback ready)")
    
    # 6. Test app imports
    print("\n6. 🧪 TESTING APP IMPORTS...")
    try:
        from app import app
        print("✅ Main app imports successfully")
        
        # Test health endpoint
        with app.test_client() as client:
            response = client.get('/health')
            if response.status_code == 200:
                print("✅ Health endpoint working")
                data = response.get_json()
                if data.get('status') == 'healthy':
                    print("✅ Health check returns healthy status")
                else:
                    print("⚠️  Health check not returning healthy status")
            else:
                print(f"❌ Health endpoint returned {response.status_code}")
                all_checks_passed = False
                
    except Exception as e:
        print(f"❌ Error importing main app: {e}")
        all_checks_passed = False
    
    # Final summary
    print(f"\n📋 All checks passed: {'✅ YES' if all_checks_passed else '❌ NO'}")
    
    if all_checks_passed:
        print("\n" + "=" * 70)
        print("🎉 DEPLOYMENT READY FOR RENDER.COM!")
        print("🚀 You can now deploy with confidence")
        print("📝 Remember to set environment variables on Render.com:")
        print("   • PORT (auto-set by Render)")
        print("   • GEMINI_API_KEY (optional, for AI features)")
        print("   • SECRET_KEY (optional, auto-generated by Render)")
        print("=" * 70)
    else:
        print("\n" + "=" * 70)
        print("❌ DEPLOYMENT NOT READY")
        print("🔧 Please fix the issues above before deploying")
        print("=" * 70)
    
    return all_checks_passed

if __name__ == "__main__":
    success = check_render_deployment_readiness()
    sys.exit(0 if success else 1)
