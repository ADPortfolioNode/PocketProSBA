### STAGE 1: FRONTEND BUILDER ###
# This stage builds the React frontend application.
FROM node:16-alpine as frontend-builder

# Set working directory
WORKDIR /app

# Copy frontend package manifests and install dependencies to leverage caching
COPY frontend/package.json frontend/package-lock.json ./frontend/
RUN cd frontend && npm ci

# Copy the rest of the frontend source code and build it
COPY frontend/ ./frontend/
RUN cd frontend && npm run build

### STAGE 2: BACKEND BUILDER ###
# This stage installs Python dependencies into a virtual environment.
FROM python:3.9-slim as backend-builder

WORKDIR /app

ENV VIRTUAL_ENV=/opt/venv
RUN python3 -m venv $VIRTUAL_ENV
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

RUN apt-get update && apt-get install -y --no-install-recommends build-essential gcc && rm -rf /var/lib/apt/lists/*
RUN pip install --upgrade pip wheel
COPY requirements-render-production-clean.txt .
RUN pip install --no-cache-dir -r requirements-render-production-clean.txt

### STAGE 3: FINAL IMAGE ###
# This stage creates the final, lean production image.
FROM python:3.9-slim

WORKDIR /app

# Create a non-root user and group for security.
RUN groupadd -r appgroup && useradd -r -g appgroup -m -u 1000 appuser

# Copy the virtual environment from the backend-builder stage.
COPY --from=backend-builder /opt/venv /opt/venv

# Copy the built React assets from the frontend-builder stage into /app/static.
# The Flask app is configured to serve files from this directory.
COPY --from=frontend-builder --chown=appuser:appgroup /app/frontend/build /app/static

# Copy the rest of the application code with correct ownership.
COPY --chown=appuser:appgroup . .

# Create and set permissions for necessary application directories.
RUN mkdir -p /app/uploads /app/logs /app/chroma_storage && \
    chown -R appuser:appgroup /app/uploads /app/logs /app/chroma_storage

# Activate the virtual environment for subsequent commands.
ENV VIRTUAL_ENV=/opt/venv
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Set environment variables for Render.com
ENV FLASK_ENV=production \
    FLASK_APP=app_full.py \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

# Switch to the non-root user.
USER appuser

# Expose the port the app will run on. Render provides the PORT env var.
EXPOSE 10000

# The command to run the application using Gunicorn.
# It uses the $PORT environment variable provided by Render.
CMD ["gunicorn", "--bind", "0.0.0.0:$PORT", "app_full:application"]
