### STAGE 1: FRONTEND BUILDER ###
# This stage builds the React frontend application.
# Pin the base image to a specific version for reproducible and secure builds.
# Example: 16.20.2. Check for the latest patch of node 16-alpine.
FROM node:16.20.2-alpine as frontend-builder

WORKDIR /app/frontend

# Copy package files and install dependencies from the frontend directory
COPY frontend/package.json frontend/package-lock.json* ./
RUN npm install

# Copy the rest of the frontend source code and build it
COPY frontend/ ./
RUN npm run build

### STAGE 2: BACKEND BUILDER ###
# This stage installs Python dependencies into a virtual environment.
# Pin the base image to a specific version for reproducible and secure builds.
# Example: 3.9.18. Check for the latest patch of python 3.9-slim.
FROM python:3.9.18-slim as backend-builder

WORKDIR /app

ENV VIRTUAL_ENV=/opt/venv
RUN python3 -m venv $VIRTUAL_ENV
ENV PATH="$VIRTUAL_ENV/bin:$PATH"
# Combine pip upgrade with install to reduce layers
RUN apt-get update && apt-get install -y --no-install-recommends build-essential gcc && rm -rf /var/lib/apt/lists/*
COPY requirements-render-full.txt .
RUN pip install --upgrade pip wheel && pip install --no-cache-dir -r requirements-render-full.txt

### STAGE 3: FINAL IMAGE ###
# This stage creates the final, lean production image.
FROM python:3.9.18-slim

WORKDIR /app

# Create a non-root user and group for security.
RUN groupadd -r appgroup && useradd -r -g appgroup -m -u 1000 appuser

# Copy the virtual environment from the backend-builder stage.
COPY --from=backend-builder /opt/venv /opt/venv

# Copy the built React assets from the frontend-builder stage into /app/static.
# The Flask app is configured to serve files from this directory.
COPY --from=frontend-builder --chown=appuser:appgroup /app/frontend/build ./static

# Copy only the necessary application source files instead of the entire context.
# This creates a smaller and more secure image by excluding files like .git,
# .env, or local development artifacts. A .dockerignore file is also crucial.
# NOTE: If your app uses other Python modules, add COPY lines for them here.
COPY --chown=appuser:appgroup app_full.py ./

# Create and set permissions for necessary application directories.
# The 'uploads' and 'logs' directories are created so permissions can be set.
# They will be mounted over by persistent disks on Render.
RUN mkdir -p /app/uploads /app/logs && \
    chown -R appuser:appgroup /app/uploads /app/logs

# Activate the virtual environment for subsequent commands.
ENV VIRTUAL_ENV=/opt/venv
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Set environment variables for Render.com
ENV FLASK_ENV=production \
    FLASK_APP=app_full.py \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

# Switch to the non-root user.
USER appuser

# Expose the port the app will run on. Render provides the PORT env var.
EXPOSE 10000

# The command to run the application using Gunicorn.
# It uses the $PORT environment variable provided by Render.
# Use multiple synchronous workers to handle concurrent requests on a single instance.
# A good starting point for a 'standard' plan (1 CPU) is 2-4 workers.
CMD gunicorn --bind 0.0.0.0:$PORT --workers 3 --timeout 120 app_full:app
