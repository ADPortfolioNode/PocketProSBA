version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "5000:5000"  # For local development
      # Render.com will set the PORT env var and app listens on that port
    volumes:
      - .:/app
      - /tmp:/tmp
      - backend_tmpfs:/dev/shm
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=true
      - PORT=5000  # Default for local, Render.com will override this
      - PYTHONUNBUFFERED=1
      # PYTHONMALLOC=debug can increase memory usage, removing it
      - PYTHONDONTWRITEBYTECODE=1
    # For Render.com deployment, the app should listen on $PORT
    command: gunicorn --bind 0.0.0.0:${PORT:-5000} --timeout 60 --workers 1 --log-level info minimal_app:app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    networks:
      - app-network

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend.dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_BACKEND_URL=/api
      # Disable ESLint errors from failing the build
      - CI=false
      - ESLINT_NO_DEV_ERRORS=true
      - NODE_OPTIONS=--max-old-space-size=2048
      - GENERATE_SOURCEMAP=false
      - WDS_SOCKET_PORT=0
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 1G
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend
      - frontend
    environment:
      - CHROMA_PORT=8000
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  backend_tmpfs:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
