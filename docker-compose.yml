services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - .:/app
      - /tmp:/tmp
      - backend_tmpfs:/dev/shm
    environment:
      - FLASK_ENV=production
      - PORT=5000
      - PYTHONUNBUFFERED=1
      - FLASK_APP=app.py
    command: python app.py
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    networks:
      - app-network
    depends_on:
      - chromadb

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend.dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_BACKEND_URL=/api
      # Disable ESLint errors from failing the build
      - CI=false
      - ESLINT_NO_DEV_ERRORS=true
      - NODE_OPTIONS=--max-old-space-size=2048
      - GENERATE_SOURCEMAP=false
      - WDS_SOCKET_PORT=0
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 1G
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend
      - frontend
      - chromadb
    environment:
      - CHROMA_PORT=8000
    networks:
      - app-network

  chromadb:
    build:
      context: .
      dockerfile: Dockerfile.chromadb
    ports:
      - "8000:8000"
    environment:
      - CHROMA_HOST=0.0.0.0
      - CHROMA_PORT=8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  backend_tmpfs:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
