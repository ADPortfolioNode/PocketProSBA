# Dockerfile.frontend.render

# Stage 1: Build the React application
FROM node:16-alpine as build

WORKDIR /app

# Copy package files and install dependencies from the frontend directory
COPY frontend/package.json frontend/package-lock.json* ./
RUN npm install

# Copy the rest of the frontend source code
COPY frontend/ ./

# Set build-time environment variables
ENV CI=true
ENV ESLINT_NO_DEV_ERRORS=true
ENV NODE_OPTIONS=--max-old-space-size=4096

# Build the application for production
RUN npm run build

# Stage 2: Production environment with Nginx
FROM nginx:stable-alpine

# Copy the built React app to the Nginx server directory
COPY --from=build /app/build /usr/share/nginx/html

# Copy the Nginx configuration template and the entrypoint script
# The template will be processed by the entrypoint script to substitute environment variables.
COPY nginx.render.conf /etc/nginx/conf.d/nginx.render.conf.template
COPY entrypoint.sh /usr/local/bin/entrypoint.sh

# Make the entrypoint script executable
RUN chmod +x /usr/local/bin/entrypoint.sh

# Expose port 80 for Nginx
EXPOSE 80

# Set the entrypoint to our custom script
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# The command to start Nginx is now in the entrypoint script
